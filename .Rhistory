}
library(shiny)
library(tidyverse)
library(glue)
setwd("~/Documents/DU- R studio/snowboard_app")
# ---- Chargement des données ----
data <- tibble()
for(stage in 1:2){
file <- str_glue("data/stage_stats_{stage}.csv")
stage_stats_X <- read_csv(file, show_col_types = FALSE) %>%
mutate(
id = stage,
date = as.Date(date),
`Temperature Score` = as.numeric(`Temperature Score`),
`Temperature Deviation (°C)` = as.numeric(`Temperature Deviation (°C)`),
`Temperature Trend Deviation` = as.numeric(`Temperature Trend Deviation`),
`Average Resting Heart Rate` = as.numeric(`Average Resting Heart Rate`),
`Recovery Index Score` = as.numeric(`Recovery Index Score`),
`Resting Heart Rate Score` = as.numeric(`Resting Heart Rate Score`),
`Average HRV` = as.numeric(`Average HRV`),
`Lowest Resting Heart Rate` = as.numeric(`Lowest Resting Heart Rate`),
`Sleep Balance Score` = as.numeric(`Sleep Balance Score`),
`Previous Day Activity Score` = as.numeric(`Previous Day Activity Score`),
`HRV Balance Score` = as.numeric(`HRV Balance Score`)
)
data <- bind_rows(data, stage_stats_X)
}
data_clean <- data %>% drop_na()
# ---- Interface utilisateur ----
ui <- fluidPage(
titlePanel("Analyse des données de snowboard"),
sidebarLayout(
sidebarPanel(
selectInput("stage", "Sélectionner le stage", choices = unique(data$id), selected = 1)
),
mainPanel(
tabsetPanel(
tabPanel("Température vs Récupération",
plotOutput("plot_temp_recovery")
),
tabPanel("Score de sommeil",
plotOutput("plot_sleep_score")
),
tabPanel("FC de repos",
plotOutput("plot_fcr")
)
)
)
)
)
# ---- Serveur ----
server <- function(input, output) {
data_stage <- reactive({
data_clean %>% filter(id == input$stage)
})
output$plot_temp_recovery <- renderPlot({
ggplot(data_stage(), aes(x = `Temperature Deviation (°C)`, y = `Recovery Index Score`)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "darkred") +
labs(title = "Température vs Indice de récupération",
x = "Déviation de température (°C)",
y = "Recovery Index Score")
})
output$plot_sleep_score <- renderPlot({
ggplot(data_stage(), aes(x = date, y = `Total Sleep Score`)) +
geom_line(color = "steelblue") +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Évolution du score de sommeil",
x = "Date", y = "Score de sommeil")
})
output$plot_fcr <- renderPlot({
ggplot(data_stage(), aes(x = date, y = `Average Resting Heart Rate`)) +
geom_line(color = "green4") +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "FC moyenne de repos",
x = "Date", y = "BPM")
})
}
# ---- Lancer l'application ----
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(glue)
# Charger et préparer les données
load_data <- function() {
data <- tibble()
for (stage in 1:2) {
file <- str_glue("data/stage_stats_{stage}.csv")
stage_stats_X <- read_csv(file, show_col_types = FALSE) %>%
mutate(
id = stage,
date = as.Date(date),
`Temperature Score` = as.numeric(`Temperature Score`),
`Temperature Deviation (\u00b0C)` = as.numeric(`Temperature Deviation (\u00b0C)`),
library(shiny)
library(tidyverse)
library(glue)
# Fonction pour charger les données
load_data <- function() {
data <- tibble()
for (stage in 1:2) {
file <- str_glue("data/stage_stats_{stage}.csv")
stage_stats_X <- read_csv(file, show_col_types = FALSE) %>%
rename_with(~ gsub("°", "deg", .x)) %>%
mutate(
id = stage,
date = as.Date(date),
`Temperature Score` = as.numeric(`Temperature Score`),
`Temperature Deviation (degC)` = as.numeric(`Temperature Deviation (degC)`),
`Temperature Trend Deviation` = as.numeric(`Temperature Trend Deviation`),
`Average Resting Heart Rate` = as.numeric(`Average Resting Heart Rate`),
`Recovery Index Score` = as.numeric(`Recovery Index Score`),
`Resting Heart Rate Score` = as.numeric(`Resting Heart Rate Score`),
`Average HRV` = as.numeric(`Average HRV`),
`Lowest Resting Heart Rate` = as.numeric(`Lowest Resting Heart Rate`),
`Sleep Balance Score` = as.numeric(`Sleep Balance Score`),
`Previous Day Activity Score` = as.numeric(`Previous Day Activity Score`),
`HRV Balance Score` = as.numeric(`HRV Balance Score`)
)
data <- bind_rows(data, stage_stats_X)
}
return(data)
}
# Charger les données
data <- load_data()
# Interface utilisateur
ui <- fluidPage(
titlePanel("Analyse des données de snowboard"),
sidebarLayout(
sidebarPanel(
selectInput("stage", "Sélectionner le stage :", choices = c("Tous", "1", "2"))
),
mainPanel(
tabsetPanel(
tabPanel("Durée de sommeil", plotOutput("plot_sleep")),
tabPanel("Fréquence cardiaque au repos", plotOutput("plot_hr"))
)
)
)
)
# Serveur
server <- function(input, output) {
data_filtered <- reactive({
if (input$stage == "Tous") {
data
} else {
data %>% filter(id == as.numeric(input$stage))
}
})
output$plot_sleep <- renderPlot({
ggplot(data_filtered(), aes(x = date, y = `Total Sleep Duration` / 3600)) +
geom_line(color = "steelblue") +
geom_smooth(method = "loess", se = FALSE, color = "darkred") +
labs(title = "Durée totale de sommeil par jour",
x = "Date", y = "Heures de sommeil") +
theme_minimal()
})
output$plot_hr <- renderPlot({
ggplot(data_filtered(), aes(x = date, y = `Average Resting Heart Rate`)) +
geom_line(color = "forestgreen") +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "FC moyenne de repos par jour",
x = "Date", y = "BPM") +
theme_minimal()
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(glue)
# -------------------------------
# Préparation des données
# -------------------------------
data <- tibble()
for (stage in 1:2) {
file <- str_glue("data/stage_stats_{stage}.csv")
stage_stats_X <- read_csv(file, show_col_types = FALSE) %>%
mutate(
id = stage,
date = as.Date(date),
`Temperature Score` = as.numeric(`Temperature Score`),
`Temperature Deviation (°C)` = as.numeric(`Temperature Deviation (°C)`),
`Temperature Trend Deviation` = as.numeric(`Temperature Trend Deviation`),
`Average Resting Heart Rate` = as.numeric(`Average Resting Heart Rate`),
`Recovery Index Score` = as.numeric(`Recovery Index Score`),
`Resting Heart Rate Score` = as.numeric(`Resting Heart Rate Score`),
`Average HRV` = as.numeric(`Average HRV`),
`Lowest Resting Heart Rate` = as.numeric(`Lowest Resting Heart Rate`),
`Sleep Balance Score` = as.numeric(`Sleep Balance Score`),
`Previous Day Activity Score` = as.numeric(`Previous Day Activity Score`),
`HRV Balance Score` = as.numeric(`HRV Balance Score`)
)
data <- bind_rows(data, stage_stats_X)
}
data_clean <- data %>% drop_na()
# -------------------------------
# UI
# -------------------------------
ui <- navbarPage("Analyse Snowboard",
tabPanel("📊 Visualisation générale",
sidebarLayout(
sidebarPanel(
selectInput("var", "Variable à afficher :",
choices = c("Total Sleep Score", "Recovery Index Score",
"Average Resting Heart Rate", "High Activity Time")),
checkboxInput("smoother", "Ajouter une courbe de tendance", TRUE)
),
mainPanel(
plotOutput("linePlot")
)
)
),
tabPanel("💤 Analyse Sommeil",
fluidPage(
plotOutput("sleepBoxplot")
)
),
tabPanel("❤️ FC moyenne au repos",
fluidPage(
plotOutput("hrPlot")
)
),
tabPanel("🌡️ Température & Récupération",
fluidPage(
plotOutput("tempRecoveryPlot")
)
)
)
# -------------------------------
# Server
# -------------------------------
server <- function(input, output) {
# Visualisation dynamique
output$linePlot <- renderPlot({
p <- ggplot(data_clean, aes_string(x = "date", y = input$var, color = "as.factor(id)")) +
geom_line() +
labs(x = "Date", y = input$var, color = "Stage") +
theme_minimal()
if (input$smoother) {
p <- p + geom_smooth(se = FALSE, method = "loess")
}
p
})
# Boxplot sommeil vs récupération
output$sleepBoxplot <- renderPlot({
data_long <- data_clean %>%
select(date, id, `Total Sleep Score`, `Recovery Index Score`) %>%
pivot_longer(cols = c(`Total Sleep Score`, `Recovery Index Score`),
names_to = "Variable", values_to = "Valeur")
ggplot(data_long, aes(x = Variable, y = Valeur, fill = Variable)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Comparaison des scores de sommeil et récupération",
x = "", y = "Score")
})
# Fréquence cardiaque moyenne au repos
output$hrPlot <- renderPlot({
ggplot(data_clean, aes(x = date, y = `Average Resting Heart Rate`, color = as.factor(id))) +
geom_line() +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Fréquence cardiaque moyenne au repos",
x = "Date", y = "FC moyenne (bpm)", color = "Stage") +
theme_minimal()
})
# Température vs récupération
output$tempRecoveryPlot <- renderPlot({
ggplot(data_clean, aes(x = `Temperature Deviation (°C)`, y = `Recovery Index Score`)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "darkred") +
labs(title = "Déviation de température vs Indice de récupération",
x = "Déviation température (°C)",
y = "Recovery Index Score") +
theme_minimal()
})
}
# -------------------------------
# Lancement de l'app
# -------------------------------
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(glue)
# -------------------------------
# Préparation des données
# -------------------------------
data <- tibble()
for (stage in 1:2) {
file <- str_glue("data/stage_stats_{stage}.csv")
stage_stats_X <- read_csv(file, show_col_types = FALSE) %>%
mutate(
id = stage,
date = as.Date(date),
`Temperature Score` = as.numeric(`Temperature Score`),
`Temperature Deviation (°C)` = as.numeric(`Temperature Deviation (°C)`),
`Temperature Trend Deviation` = as.numeric(`Temperature Trend Deviation`),
`Average Resting Heart Rate` = as.numeric(`Average Resting Heart Rate`),
`Recovery Index Score` = as.numeric(`Recovery Index Score`),
`Resting Heart Rate Score` = as.numeric(`Resting Heart Rate Score`),
`Average HRV` = as.numeric(`Average HRV`),
`Lowest Resting Heart Rate` = as.numeric(`Lowest Resting Heart Rate`),
`Sleep Balance Score` = as.numeric(`Sleep Balance Score`),
`Previous Day Activity Score` = as.numeric(`Previous Day Activity Score`),
`HRV Balance Score` = as.numeric(`HRV Balance Score`)
)
data <- bind_rows(data, stage_stats_X)
}
data_clean <- data %>% drop_na()
# -------------------------------
# UI
# -------------------------------
ui <- navbarPage("Analyse Snowboard",
tabPanel("📊 Visualisation générale",
sidebarLayout(
sidebarPanel(
selectInput("var", "Variable à afficher :",
choices = c("Total Sleep Score", "Recovery Index Score",
"Average Resting Heart Rate", "High Activity Time")),
checkboxInput("smoother", "Ajouter une courbe de tendance", TRUE)
),
mainPanel(
plotOutput("linePlot")
)
)
),
tabPanel("💤 Analyse Sommeil",
fluidPage(
plotOutput("sleepBoxplot")
)
),
tabPanel("❤️ FC moyenne au repos",
fluidPage(
plotOutput("hrPlot")
)
),
tabPanel("🌡️ Température & Récupération",
fluidPage(
plotOutput("tempRecoveryPlot")
)
)
)
# -------------------------------
# Server
# -------------------------------
server <- function(input, output) {
# Visualisation dynamique
output$linePlot <- renderPlot({
p <- ggplot(data_clean, aes_string(x = "date", y = input$var, color = "as.factor(id)")) +
geom_line() +
labs(x = "Date", y = input$var, color = "Stage") +
theme_minimal()
if (input$smoother) {
p <- p + geom_smooth(se = FALSE, method = "loess")
}
p
})
# Boxplot sommeil vs récupération
output$sleepBoxplot <- renderPlot({
data_long <- data_clean %>%
select(date, id, `Total Sleep Score`, `Recovery Index Score`) %>%
pivot_longer(cols = c(`Total Sleep Score`, `Recovery Index Score`),
names_to = "Variable", values_to = "Valeur")
ggplot(data_long, aes(x = Variable, y = Valeur, fill = Variable)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Comparaison des scores de sommeil et récupération",
x = "", y = "Score")
})
# Fréquence cardiaque moyenne au repos
output$hrPlot <- renderPlot({
ggplot(data_clean, aes(x = date, y = `Average Resting Heart Rate`, color = as.factor(id))) +
geom_line() +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Fréquence cardiaque moyenne au repos",
x = "Date", y = "FC moyenne (bpm)", color = "Stage") +
theme_minimal()
})
# Température vs récupération
output$tempRecoveryPlot <- renderPlot({
ggplot(data_clean, aes(x = `Temperature Deviation (°C)`, y = `Recovery Index Score`)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "darkred") +
labs(title = "Déviation de température vs Indice de récupération",
x = "Déviation température (°C)",
y = "Recovery Index Score") +
theme_minimal()
})
}
# -------------------------------
# Lancement de l'app
# -------------------------------
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(glue)
# -------------------------------
# Préparation des données
# -------------------------------
data <- tibble()
for (stage in 1:2) {
file <- str_glue("data/stage_stats_{stage}.csv")
stage_stats_X <- read_csv(file, show_col_types = FALSE) %>%
mutate(
id = stage,
date = as.Date(date),
`Temperature Score` = as.numeric(`Temperature Score`),
`Temperature Deviation (°C)` = as.numeric(`Temperature Deviation (°C)`),
`Temperature Trend Deviation` = as.numeric(`Temperature Trend Deviation`),
`Average Resting Heart Rate` = as.numeric(`Average Resting Heart Rate`),
`Recovery Index Score` = as.numeric(`Recovery Index Score`),
`Resting Heart Rate Score` = as.numeric(`Resting Heart Rate Score`),
`Average HRV` = as.numeric(`Average HRV`),
`Lowest Resting Heart Rate` = as.numeric(`Lowest Resting Heart Rate`),
`Sleep Balance Score` = as.numeric(`Sleep Balance Score`),
`Previous Day Activity Score` = as.numeric(`Previous Day Activity Score`),
`HRV Balance Score` = as.numeric(`HRV Balance Score`)
)
data <- bind_rows(data, stage_stats_X)
}
data_clean <- data %>% drop_na()
# -------------------------------
# UI
# -------------------------------
ui <- navbarPage("Analyse Snowboard",
tabPanel("Visualisation générale",
sidebarLayout(
sidebarPanel(
selectInput("var", "Variable à afficher :",
choices = c("Total Sleep Score", "Recovery Index Score",
"Average Resting Heart Rate", "High Activity Time")),
checkboxInput("smoother", "Ajouter une courbe de tendance", TRUE)
),
mainPanel(
plotOutput("linePlot")
)
)
),
tabPanel("Analyse Sommeil",
fluidPage(
plotOutput("sleepBoxplot")
)
),
tabPanel("FC moyenne au repos",
fluidPage(
plotOutput("hrPlot")
)
),
tabPanel("Température & Récupération",
fluidPage(
plotOutput("tempRecoveryPlot")
)
)
)
# -------------------------------
# Server
# -------------------------------
server <- function(input, output) {
# Visualisation dynamique
output$linePlot <- renderPlot({
p <- ggplot(data_clean, aes_string(x = "date", y = input$var, color = "as.factor(id)")) +
geom_line() +
labs(x = "Date", y = input$var, color = "Stage") +
theme_minimal()
if (input$smoother) {
p <- p + geom_smooth(se = FALSE, method = "loess")
}
p
})
# Boxplot sommeil vs récupération
output$sleepBoxplot <- renderPlot({
data_long <- data_clean %>%
select(date, id, `Total Sleep Score`, `Recovery Index Score`) %>%
pivot_longer(cols = c(`Total Sleep Score`, `Recovery Index Score`),
names_to = "Variable", values_to = "Valeur")
ggplot(data_long, aes(x = Variable, y = Valeur, fill = Variable)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Comparaison des scores de sommeil et récupération",
x = "", y = "Score")
})
# Fréquence cardiaque moyenne au repos
output$hrPlot <- renderPlot({
ggplot(data_clean, aes(x = date, y = `Average Resting Heart Rate`, color = as.factor(id))) +
geom_line() +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Fréquence cardiaque moyenne au repos",
x = "Date", y = "FC moyenne (bpm)", color = "Stage") +
theme_minimal()
})
# Température vs récupération
output$tempRecoveryPlot <- renderPlot({
ggplot(data_clean, aes(x = `Temperature Deviation (°C)`, y = `Recovery Index Score`)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "darkred") +
labs(title = "Déviation de température vs Indice de récupération",
x = "Déviation température (°C)",
y = "Recovery Index Score") +
theme_minimal()
})
}
# -------------------------------
# Lancement de l'app
# -------------------------------
shinyApp(ui = ui, server = server)
runApp()
library(shiny)
library(tidyverse)
library(glue)
library(janitor)  # Pour clean_names()
install.packages(janitor)
install.packages("janitor")
runApp()
